import socket
import struct
import textwrap


byts3 = 65536 #Used for Sniffing Packet Data
DATA_TAB_3 = '\t\t\t   '

#Create the socket to sniff packet data 
NetworkSniffer = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(3))

#Begin waiting for Packet Data 
while True:
    PacketData, PacketAddr = NetworkSniffer.recvfrom(byts3)
    
    if PacketData:
        print("Packer Recieved")

        #Unpack the Ethenet frame
        dest_mac, src_mac, proto = struct.unpack('! 6s 6s H', PacketData[:14])

        #Format the Mac Address and src Mac address
        bytes_str = map('{:02x}'.format, dest_mac)
        mac_addr1 = ':'.join(bytes_str).upper()

        bytes_str2 = map('{:02x}'.format, src_mac)
        mac_addr2 = ':'.join(bytes_str2).upper()

        EthernetProtocol = socket.htons(proto)
        PacketData[14:]
        DataPlaceHolder = PacketData[14:]

        #Save the PacketData to both a file and the screen 
        print("DESTINATION MAC ADDESSS: =>", mac_addr1)
        print("SRC MAC ADDRESS: =>", mac_addr2)
        print("ETHERNET PROTOCOL: => ", EthernetProtocol)
        print("PACKET DATA: => ", PacketData[14:])

        #Check the Ethernet Protocol
        if EthernetProtocol == 8:
            
            #Unpack the IPv4 Packets Recieved
            version_header_len = PacketData[0]
            version = version_header_len >> 4
            header_len = (version_header_len & 15) * 4
            ttl, proto, src, target = struct.unpack('! 8x B B 2x 4s 4s', PacketData[:20])
            IPV4AddrSrc = '.'.join(map(str, src))
            IPV4AddrTrgt = '.'.join(map(str, target))
            PackerHeader = PacketData[header_len:]

            #FORMAT THESE LATER ON 
            print("IPv4 PACKET RECIEVED")
            print("VERSION: => ", version, " ", header_len, " ", ttl)
            print("PROTOCOL: => ", proto, " ", src, " ", target)

            #Check for ICMP
            if proto == 1:
                
                icmp_type, code, checksum = struct.unpack('! B B H', PacketData[:4])
                
                #FORMAT THESE LATER ON
                print("ICMP RECIEVED")
                print("ICMP TYPE: => ",icmp_type)
                print("CODE: => ",code)
                print("CHECKSUM: => ",checksum)

                #Format PacketData[:4]
                size = 80
                size -= len(DATA_TAB_3)
                ST = PacketData[:4]
                if isinstance(ST, bytes):
                    ST = ''.join(r'\x{:02x}'.format(byte) for byte in ST)

                if size % 2:
                    size-= 1
                    FormatOutLine = '\n'.join([prefix + line for line in textwrap.wrap(ST, size)])
                    print("FORMAT_OUT_LINE: => ", FormatOutLine)
            
            elif proto == 6:
                src_port, dest_port, sequence, acknowledgment, flag_urg, flag_ack, flag_psh, flag_rst, flag_syn, flag_fin = struct.unpack(
            '! H H L L H H H H H H', PacketData[:24])
                print("TCP Segment:")
                print("SRC PORT: => ", src_port, " DESTINATION PORT: => ", dest_port)
                print("SEQUENCE: => ", sequence, "ACKNOWLEDGEMENT: => ", acknowledgment)
                print("Flags")
                print("URG: => ",flag_urg)
                print("ACK: => ",flag_ack)
                print("PSH: => ",flag_psh)
                print("RST: => ",flag_rst)
                print("SYN: => ",flag_syn)
                print("FIN: => ",flag_fin)

            if len(DataPlaceHolder) > 0:
                # HTTP
                    if src_port == 80 or dest_port == 80:
                        print(TAB_2 + 'HTTP Data:')
                        try:
                            http = HTTP(DataPlaceHolder)
                            http_info = str(http.DataPlaceHolder).split('\n')
                            for line in http_info:
                                print(DATA_TAB_3 + str(line))
                        except:
                            print("Testing")
            
            elif proto == 17:
                src_port, dest_port, Lengthd = struct.unpack('! H H 2x H', PacketData[:8])
                UDP_Packet = PacketData[:8]

                print("UDP Segment")
                print("SRC PORT: => ", src_port, " DESTINATION PORT: => ", dest_port, " LENGTH: => ", Lengthd)

            else:
                print("Other IPv4 Data...")
            
        






