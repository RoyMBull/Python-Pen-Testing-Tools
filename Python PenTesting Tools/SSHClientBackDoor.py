import socket
import paramiko
import os
import sys

#Clear the console screen for startup 
os.system("clear") 

#Defines the mai target IP and port the cleint wishses to connect to 
ip = input("Target IP? =>   ")
port = int(input("Target Port? =>   "))
address = (ip, port)

#Sets the main credentials that the client needds to send over to authenticate for SSH
username = input("Username? =>   ")
passwd = input("Password? =>   ")
credentials = (username, passwd)

#First we are going to start defining the main SSHCleint for the session
sshclient = paramiko.SSHClient()

sshclientchannel = paramiko.channel.Channel('c100') #This sets up the main channel name for the connecitonn with the SSH clint and will set the ID of the secure channel

#This is going to add the missing host key policy for in case we are missing any host keys asosicated with the session on the system
sshclient.set_missing_host_key_policy(paramiko.AutoAddPolicy)

#Last thing to do is to connect the target tothe main ssh server socket so we can start the reasl session for it
tcpconnection = str(sshclient.connect(ip, port, username, passwd)) #  ADD THE PARAMATER "pkey" back in when ready to test again   Remove the pkey along iwth the from_private key() whne using ths without key based authentication

#This will also auto generate a session for the ssh connection on our behlaf as well until it's terminate
sshclient.get_transport().open_session() #This is oging to open the main session to allow us to pipe commands to the server whoole also recieivng session detils from the server side that's piped ito the main server to cleint side responsese and return values

#This is going to begin taking in shell code arguments to the main session opened with the SSH server
while True:

    os.system("clear")
    
    print("Enter in a command now. Hit enter at the end of the output to enter in the next line of command")
    sshcommand = input("")
    if sshcommand == "exit": #If we send over the command "exit" to the paramte it will close out the main while loop and bring us to the end ofthe code where it will close out the mian shel connection
        break

    #This is going to launch our main shell for the ssh session that will allow commands to be piped and passed to the main SSH server over a secure communication pipeline
    shell = sshclient.invoke_shell() 

    #The command will be sent to the exec_command() function using the mian socket from pramiko
    stdin, stdout, stderr = sshclient.exec_command(sshcommand) #YOU CAN ONLY SEND ONE OCMMAND AT A TIME, AND EACH TIME YOU DO, THE CHANNEL THAT WAS OPENED IS Closed

    #The exit status of the commadn execution will be recorded nad the lines of the command will be printed back to us so we can see the main results
    stdout.channel.recv_exit_status()
    lines = stdout.readlines()
    for line in lines:
        print (line)
    input("")

sshclient.close()

